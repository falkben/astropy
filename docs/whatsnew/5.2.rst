.. _whatsnew-5.2:

**************************
What's New in Astropy 5.2?
**************************

Overview
========

Astropy 5.2 is a major release that adds significant new functionality since
the 5.1 release.

In particular, this release includes:

* :ref:`whatsnew-5.2-quantity-dtype`
* :ref:`whatsnew-5.2-cosmology`
* :ref:`whatsnew-5.2-coordinates`
* :ref:`whatsnew-5.2-fits`


.. _whatsnew-5.2-quantity-dtype:

``Quantity`` data types
=======================

The default dtype argument for ``Quantity`` has been changed, so that one can
now explicitly give ``dtype=None`` to get the same behaviour as :mod:`numpy`.
Without an explicit argument, any integer values are still upcast to floating
point, since that makes more sense for physical quantities.


.. _whatsnew-5.2-cosmology:

Updates to :mod:`astropy.cosmology`
===================================

A new comparison function has been added --
:func:`astropy.cosmology.cosmology_equal` -- that mirrors its numpy counterparts
but allows for the arguments to be converted to a |Cosmology| and to compare flat
cosmologies with their non-flat equivalents.

    >>> from astropy.cosmology import cosmology_equal
    >>> from astropy.cosmology import FlatLambdaCDM, LambdaCDM
    >>> cosmo1 = FlatLambdaCDM(70, 0.3)
    >>> cosmo2 = LambdaCDM(70, 0.3, 0.7)
    >>> cosmology_equal(cosmo1.to_format("mapping"), cosmo2,
    ...                 format=("mapping", None), allow_equivalent=True)
    True


.. _whatsnew-5.2-coordinates:

Topocentric ITRS Frame
======================

A topocentric ITRS frame has been added that makes dealing with near-Earth objects
easier and more intuitive.::

    >>> from astropy.coordinates import EarthLocation, AltAz, ITRS
    >>> from astropy.time import Time
    >>> from astropy import units as u

    >>> t = Time('J2010')
    >>> obj = EarthLocation(-1*u.deg, 52*u.deg, height=10.*u.km)
    >>> home = EarthLocation(-1*u.deg, 52*u.deg, height=0.*u.km)

    >>> # Direction of object from GEOCENTER
    >>> itrs_geo = obj.get_itrs(t).cartesian

    >>> # now get the Geocentric ITRS position of observatory
    >>> obsrepr = home.get_itrs(t).cartesian

    >>> # topocentric ITRS position of a straight overhead object
    >>> itrs_repr = itrs_geo - obsrepr

    >>> # create an ITRS object that appears straight overhead for a TOPOCENTRIC OBSERVER
    >>> itrs_topo = ITRS(itrs_repr, obstime=t, location=home)

    >>> # convert to AltAz
    >>> aa = itrs_topo.transform_to(AltAz(obstime=t, location=home))


.. _whatsnew-5.2-fits:

Accessing cloud-hosted FITS files
=================================

A ``use_fsspec`` argument has been added to `astropy.io.fits.open` which
enables users to seamlessly extract data from FITS files stored on a web server
or in the cloud without downloading the entire file to local storage.
This feature uses a new optional dependency, `fsspec`_, which supports a range
of remote and distributed storage backends including Amazon and Google Cloud Storage.
For example, you can now access a Hubble Space Telescope image located in
Hubble's public Amazon S3 bucket as follows::


    >>> from astropy.io import fits

    >>> # Location of a large Hubble archive image in Amazon S3 (213 MB)
    >>> uri = "s3://stpubdata/hst/public/j8pu/j8pu0y010/j8pu0y010_drc.fits"

    >>> # Download the primary header
    >>> with fits.open(uri) as hdul:
    ...
    ...     # Download a single header
    ...     header = hdul[1].header
    ...
    ...     # Download a single image
    ...     mydata = hdul[1].data
    ...
    ...     # Download a small cutout
    ...     cutout = hdul[1].section[10:20, 30:50]

Note that the example above obtains a cutout image using the `~astropy.io.fits.ImageHDU.section`
attribute rather than the traditional `~astropy.io.fits.ImageHDU.data` attribute.
The use of ``.section`` ensures that only the necessary parts of the FITS
image are transferred from the server, rather than downloading the entire data
array. This trick can significantly speed up your code if you require small
subsets of large FITS files located on slow (remote) storage systems.
See :ref:`fits_io_cloud` for additional information on working with
FITS files in this way.


Full change log
===============

To see a detailed list of all changes in version v5.2, including changes in
API, please see the :ref:`changelog`.

Renamed/removed functionality
=============================
