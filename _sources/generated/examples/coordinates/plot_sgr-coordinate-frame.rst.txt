
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "generated/examples/coordinates/plot_sgr-coordinate-frame.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_generated_examples_coordinates_plot_sgr-coordinate-frame.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_generated_examples_coordinates_plot_sgr-coordinate-frame.py:


==========================================================
Create a new coordinate class (for the Sagittarius stream)
==========================================================

This document describes in detail how to subclass and define a custom spherical
coordinate frame, as discussed in :ref:`astropy:astropy-coordinates-design` and
the docstring for `~astropy.coordinates.BaseCoordinateFrame`. In this example,
we will define a coordinate system defined by the plane of orbit of the
Sagittarius Dwarf Galaxy (hereafter Sgr; as defined in Majewski et al. 2003).
The Sgr coordinate system is often referred to in terms of two angular
coordinates, :math:`\Lambda,B`.

To do this, we need to define a subclass of
`~astropy.coordinates.BaseCoordinateFrame` that knows the names and units of the
coordinate system angles in each of the supported representations.  In this case
we support `~astropy.coordinates.SphericalRepresentation` with "Lambda" and
"Beta". Then we have to define the transformation from this coordinate system to
some other built-in system. Here we will use Galactic coordinates, represented
by the `~astropy.coordinates.Galactic` class.

See Also
--------

* The `gala package <http://gala.adrian.pw/>`_, which defines a number of
  Astropy coordinate frames for stellar stream coordinate systems.
* Majewski et al. 2003, "A Two Micron All Sky Survey View of the Sagittarius
  Dwarf Galaxy. I. Morphology of the Sagittarius Core and Tidal Arms",
  https://arxiv.org/abs/astro-ph/0304198
* Law & Majewski 2010, "The Sagittarius Dwarf Galaxy: A Model for Evolution in a
  Triaxial Milky Way Halo", https://arxiv.org/abs/1003.1132
* David Law's Sgr info page https://www.stsci.edu/~dlaw/Sgr/


*By: Adrian Price-Whelan, Erik Tollerud*

*License: BSD*

.. GENERATED FROM PYTHON SOURCE LINES 44-46

Make `print` work the same in all versions of Python, set up numpy,
matplotlib, and use a nicer set of plot parameters:

.. GENERATED FROM PYTHON SOURCE LINES 46-53

.. code-block:: default


    import numpy as np
    import matplotlib.pyplot as plt
    from astropy.visualization import astropy_mpl_style
    plt.style.use(astropy_mpl_style)









.. GENERATED FROM PYTHON SOURCE LINES 54-55

Import the packages necessary for coordinates

.. GENERATED FROM PYTHON SOURCE LINES 55-61

.. code-block:: default


    from astropy.coordinates import frame_transform_graph
    from astropy.coordinates.matrix_utilities import rotation_matrix, matrix_product, matrix_transpose
    import astropy.coordinates as coord
    import astropy.units as u








.. GENERATED FROM PYTHON SOURCE LINES 62-65

The first step is to create a new class, which we'll call
``Sagittarius`` and make it a subclass of
`~astropy.coordinates.BaseCoordinateFrame`:

.. GENERATED FROM PYTHON SOURCE LINES 65-107

.. code-block:: default



    class Sagittarius(coord.BaseCoordinateFrame):
        """
        A Heliocentric spherical coordinate system defined by the orbit
        of the Sagittarius dwarf galaxy, as described in
            https://ui.adsabs.harvard.edu/abs/2003ApJ...599.1082M
        and further explained in
            https://www.stsci.edu/~dlaw/Sgr/.

        Parameters
        ----------
        representation : `~astropy.coordinates.BaseRepresentation` or None
            A representation object or None to have no data (or use the other keywords)
        Lambda : `~astropy.coordinates.Angle`, optional, must be keyword
            The longitude-like angle corresponding to Sagittarius' orbit.
        Beta : `~astropy.coordinates.Angle`, optional, must be keyword
            The latitude-like angle corresponding to Sagittarius' orbit.
        distance : `~astropy.units.Quantity`, optional, must be keyword
            The Distance for this object along the line-of-sight.
        pm_Lambda_cosBeta : `~astropy.units.Quantity`, optional, must be keyword
            The proper motion along the stream in ``Lambda`` (including the
            ``cos(Beta)`` factor) for this object (``pm_Beta`` must also be given).
        pm_Beta : `~astropy.units.Quantity`, optional, must be keyword
            The proper motion in Declination for this object (``pm_ra_cosdec`` must
            also be given).
        radial_velocity : `~astropy.units.Quantity`, optional, keyword-only
            The radial velocity of this object.

        """

        default_representation = coord.SphericalRepresentation
        default_differential = coord.SphericalCosLatDifferential

        frame_specific_representation_info = {
            coord.SphericalRepresentation: [
                coord.RepresentationMapping('lon', 'Lambda'),
                coord.RepresentationMapping('lat', 'Beta'),
                coord.RepresentationMapping('distance', 'distance')]
        }









.. GENERATED FROM PYTHON SOURCE LINES 108-126

Breaking this down line-by-line, we define the class as a subclass of
`~astropy.coordinates.BaseCoordinateFrame`. Then we include a descriptive
docstring.  The final lines are class-level attributes that specify the
default representation for the data, default differential for the velocity
information, and mappings from the attribute names used by representation
objects to the names that are to be used by the ``Sagittarius`` frame. In this
case we override the names in the spherical representations but don't do
anything with other representations like cartesian or cylindrical.

Next we have to define the transformation from this coordinate system to some
other built-in coordinate system; we will use Galactic coordinates. We can do
this by defining functions that return transformation matrices, or by simply
defining a function that accepts a coordinate and returns a new coordinate in
the new system. Because the transformation to the Sagittarius coordinate
system is just a spherical rotation from Galactic coordinates, we'll just
define a function that returns this matrix. We'll start by constructing the
transformation matrix using pre-determined Euler angles and the
``rotation_matrix`` helper function:

.. GENERATED FROM PYTHON SOURCE LINES 126-139

.. code-block:: default


    SGR_PHI = (180 + 3.75) * u.degree # Euler angles (from Law & Majewski 2010)
    SGR_THETA = (90 - 13.46) * u.degree
    SGR_PSI = (180 + 14.111534) * u.degree

    # Generate the rotation matrix using the x-convention (see Goldstein)
    D = rotation_matrix(SGR_PHI, "z")
    C = rotation_matrix(SGR_THETA, "x")
    B = rotation_matrix(SGR_PSI, "z")
    A = np.diag([1.,1.,-1.])
    SGR_MATRIX = matrix_product(A, B, C, D)









.. GENERATED FROM PYTHON SOURCE LINES 140-143

Since we already constructed the transformation (rotation) matrix above, and
the inverse of a rotation matrix is just its transpose, the required
transformation functions are very simple:

.. GENERATED FROM PYTHON SOURCE LINES 143-152

.. code-block:: default


    @frame_transform_graph.transform(coord.StaticMatrixTransform, coord.Galactic, Sagittarius)
    def galactic_to_sgr():
        """ Compute the transformation matrix from Galactic spherical to
            heliocentric Sgr coordinates.
        """
        return SGR_MATRIX









.. GENERATED FROM PYTHON SOURCE LINES 153-160

The decorator ``@frame_transform_graph.transform(coord.StaticMatrixTransform,
coord.Galactic, Sagittarius)``  registers this function on the
``frame_transform_graph`` as a coordinate transformation. Inside the function,
we simply return the previously defined rotation matrix.

We then register the inverse transformation by using the transpose of the
rotation matrix (which is faster to compute than the inverse):

.. GENERATED FROM PYTHON SOURCE LINES 160-169

.. code-block:: default


    @frame_transform_graph.transform(coord.StaticMatrixTransform, Sagittarius, coord.Galactic)
    def sgr_to_galactic():
        """ Compute the transformation matrix from heliocentric Sgr coordinates to
            spherical Galactic.
        """
        return matrix_transpose(SGR_MATRIX)









.. GENERATED FROM PYTHON SOURCE LINES 170-175

Now that we've registered these transformations between ``Sagittarius`` and
`~astropy.coordinates.Galactic`, we can transform between *any* coordinate
system and ``Sagittarius`` (as long as the other system has a path to
transform to `~astropy.coordinates.Galactic`). For example, to transform from
ICRS coordinates to ``Sagittarius``, we would do:

.. GENERATED FROM PYTHON SOURCE LINES 175-180

.. code-block:: default


    icrs = coord.SkyCoord(280.161732*u.degree, 11.91934*u.degree, frame='icrs')
    sgr = icrs.transform_to(Sagittarius)
    print(sgr)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <SkyCoord (Sagittarius): (Lambda, Beta) in deg
        (346.81830652, -39.28360407)>




.. GENERATED FROM PYTHON SOURCE LINES 181-183

Or, to transform from the ``Sagittarius`` frame to ICRS coordinates (in this
case, a line along the ``Sagittarius`` x-y plane):

.. GENERATED FROM PYTHON SOURCE LINES 183-189

.. code-block:: default


    sgr = coord.SkyCoord(Lambda=np.linspace(0, 2*np.pi, 128)*u.radian,
                         Beta=np.zeros(128)*u.radian, frame='sagittarius')
    icrs = sgr.transform_to(coord.ICRS)
    print(icrs)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <SkyCoord (ICRS): (ra, dec) in deg
        [(284.03876751, -29.00408353), (287.24685769, -29.44848352),
         (290.48068369, -29.81535572), (293.7357366 , -30.1029631 ),
         (297.00711066, -30.30991693), (300.28958688, -30.43520293),
         (303.57772919, -30.47820084), (306.86598944, -30.43869669),
         (310.14881715, -30.31688708), (313.42076929, -30.11337526),
         (316.67661568, -29.82915917), (319.91143548, -29.46561215),
         (323.12070147, -29.02445708), (326.30034928, -28.50773532),
         (329.44683007, -27.9177717 ), (332.55714589, -27.257137  ),
         (335.62886847, -26.52860943), (338.66014233, -25.73513624),
         (341.64967439, -24.87979679), (344.59671212, -23.96576781),
         (347.50101283, -22.99629167), (350.36280652, -21.97464811),
         (353.18275454, -20.90412969), (355.96190618, -19.78802107),
         (358.70165491, -18.62958199), (  1.40369557, -17.43203397),
         (  4.06998374, -16.19855028), (  6.70269788, -14.93224899),
         (  9.30420479, -13.63618882), ( 11.87702861, -12.31336727),
         ( 14.42382347, -10.96672102), ( 16.94734952,  -9.59912794),
         ( 19.45045241,  -8.21341071), ( 21.93604568,  -6.81234162),
         ( 24.40709589,  -5.39864845), ( 26.86661004,  -3.97502106),
         ( 29.31762493,  -2.54411871), ( 31.76319801,  -1.10857781),
         ( 34.20639942,   0.32898001), ( 36.65030466,   1.76593955),
         ( 39.09798768,   3.19968374), ( 41.55251374,   4.6275852 ),
         ( 44.01693189,   6.04699804), ( 46.49426651,   7.45524993),
         ( 48.98750752,   8.84963453), ( 51.4995989 ,  10.22740448),
         ( 54.03342512,  11.58576509), ( 56.59179508,  12.92186896),
         ( 59.17742314,  14.23281165), ( 61.79290712,  15.51562883),
         ( 64.44070278,  16.76729487), ( 67.12309478,  17.98472356),
         ( 69.84216409,  19.16477088), ( 72.59975183,  20.30424045),
         ( 75.39742013,  21.3998918 ), ( 78.23641033,  22.44845192),
         ( 81.11759966,  23.44663022), ( 84.04145735,  24.39113719),
         ( 87.00800203,  25.27870692), ( 90.01676196,  26.10612335),
         ( 93.06674057,  26.87025019), ( 96.15638947,  27.56806406),
         ( 99.28359159,  28.19669038), (102.44565666,  28.75344107),
         (105.63933131,  29.23585315), (108.86082534,  29.64172698),
         (112.105855  ,  29.96916281), (115.36970341,  30.21659414),
         (118.64729687,  30.38281659), (121.93329519,  30.46701088),
         (125.22219273,  30.46875885), (128.50842634,  30.38805179),
         (131.78648572,  30.22529063), (135.05102157,  29.98127794),
         (138.29694697,  29.6572022 ), (141.51952827,  29.2546151 ),
         (144.71446203,  28.77540295), (147.87793614,  28.22175338),
         (151.00667382,  27.59611901), (154.09796066,  26.90117914),
         (157.14965528,  26.13980125), (160.16018547,  25.31500315),
         (163.12853176,  24.42991703), (166.05420084,  23.48775622),
         (168.93719133,  22.49178507), (171.77795423,  21.44529257),
         (174.57735037,  20.35156967), (177.33660656,  19.21389046),
         (180.05727218,  18.03549704), (182.74117737,  16.81958784),
         (185.39039367,  15.56930924), (188.00719783,  14.28774998),
         (190.59403895,  12.97793826), (193.15350938,  11.64284103),
         (195.68831902,  10.28536518), (198.20127316,   8.90836046),
         (200.69525342,   7.51462369), (203.17320154,   6.10690412),
         (205.63810576,   4.6879097 ), (208.09298919,   3.26031403),
         (210.54090002,   1.82676397), (212.984903  ,   0.38988751),
         (215.42807182,  -1.04769799), (217.87348209,  -2.48337744),
         (220.32420429,  -3.91452965), (222.7832966 ,  -5.338519  ),
         (225.25379684,  -6.75268736), (227.73871349,  -8.15434631),
         (230.24101506,  -9.54076983), (232.76361762, -10.90918763),
         (235.30937003, -12.25677927), (237.88103647, -13.58066929),
         (240.48127601, -14.87792359), (243.11261883, -16.14554723),
         (245.777439  , -17.38048408), (248.47792364, -18.57961852),
         (251.2160385 , -19.7397795 ), (253.9934903 , -20.85774736),
         (256.81168612, -21.93026371), (259.67169071, -22.95404466),
         (262.57418275, -23.92579758), (265.51941137, -24.84224172),
         (268.50715471, -25.70013256), (271.53668252, -26.49628998),
         (274.6067251 , -27.22762983), (277.71545113, -27.89119849),
         (280.86045662, -28.48420985), (284.03876751, -29.00408353)]>




.. GENERATED FROM PYTHON SOURCE LINES 190-191

As an example, we'll now plot the points in both coordinate systems:

.. GENERATED FROM PYTHON SOURCE LINES 191-205

.. code-block:: default


    fig, axes = plt.subplots(2, 1, figsize=(8, 10),
                             subplot_kw={'projection': 'aitoff'})

    axes[0].set_title("Sagittarius")
    axes[0].plot(sgr.Lambda.wrap_at(180*u.deg).radian, sgr.Beta.radian,
                 linestyle='none', marker='.')

    axes[1].set_title("ICRS")
    axes[1].plot(icrs.ra.wrap_at(180*u.deg).radian, icrs.dec.radian,
                 linestyle='none', marker='.')

    plt.show()




.. image-sg:: /generated/examples/coordinates/images/sphx_glr_plot_sgr-coordinate-frame_001.png
   :alt: Sagittarius, ICRS
   :srcset: /generated/examples/coordinates/images/sphx_glr_plot_sgr-coordinate-frame_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 206-210

This particular transformation is just a spherical rotation, which is a
special case of an Affine transformation with no vector offset. The
transformation of velocity components is therefore natively supported as
well:

.. GENERATED FROM PYTHON SOURCE LINES 210-243

.. code-block:: default


    sgr = coord.SkyCoord(Lambda=np.linspace(0, 2*np.pi, 128)*u.radian,
                         Beta=np.zeros(128)*u.radian,
                         pm_Lambda_cosBeta=np.random.uniform(-5, 5, 128)*u.mas/u.yr,
                         pm_Beta=np.zeros(128)*u.mas/u.yr,
                         frame='sagittarius')
    icrs = sgr.transform_to(coord.ICRS)
    print(icrs)

    fig, axes = plt.subplots(3, 1, figsize=(8, 10), sharex=True)

    axes[0].set_title("Sagittarius")
    axes[0].plot(sgr.Lambda.degree,
                 sgr.pm_Lambda_cosBeta.value,
                 linestyle='none', marker='.')
    axes[0].set_xlabel(r"$\Lambda$ [deg]")
    axes[0].set_ylabel(
        fr"$\mu_\Lambda \, \cos B$ [{sgr.pm_Lambda_cosBeta.unit.to_string('latex_inline')}]")

    axes[1].set_title("ICRS")
    axes[1].plot(icrs.ra.degree, icrs.pm_ra_cosdec.value,
                 linestyle='none', marker='.')
    axes[1].set_ylabel(
        fr"$\mu_\alpha \, \cos\delta$ [{icrs.pm_ra_cosdec.unit.to_string('latex_inline')}]")

    axes[2].set_title("ICRS")
    axes[2].plot(icrs.ra.degree, icrs.pm_dec.value,
                 linestyle='none', marker='.')
    axes[2].set_xlabel("RA [deg]")
    axes[2].set_ylabel(
        fr"$\mu_\delta$ [{icrs.pm_dec.unit.to_string('latex_inline')}]")

    plt.show()



.. image-sg:: /generated/examples/coordinates/images/sphx_glr_plot_sgr-coordinate-frame_002.png
   :alt: Sagittarius, ICRS, ICRS
   :srcset: /generated/examples/coordinates/images/sphx_glr_plot_sgr-coordinate-frame_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <SkyCoord (ICRS): (ra, dec) in deg
        [(284.03876751, -29.00408353), (287.24685769, -29.44848352),
         (290.48068369, -29.81535572), (293.7357366 , -30.1029631 ),
         (297.00711066, -30.30991693), (300.28958688, -30.43520293),
         (303.57772919, -30.47820084), (306.86598944, -30.43869669),
         (310.14881715, -30.31688708), (313.42076929, -30.11337526),
         (316.67661568, -29.82915917), (319.91143548, -29.46561215),
         (323.12070147, -29.02445708), (326.30034928, -28.50773532),
         (329.44683007, -27.9177717 ), (332.55714589, -27.257137  ),
         (335.62886847, -26.52860943), (338.66014233, -25.73513624),
         (341.64967439, -24.87979679), (344.59671212, -23.96576781),
         (347.50101283, -22.99629167), (350.36280652, -21.97464811),
         (353.18275454, -20.90412969), (355.96190618, -19.78802107),
         (358.70165491, -18.62958199), (  1.40369557, -17.43203397),
         (  4.06998374, -16.19855028), (  6.70269788, -14.93224899),
         (  9.30420479, -13.63618882), ( 11.87702861, -12.31336727),
         ( 14.42382347, -10.96672102), ( 16.94734952,  -9.59912794),
         ( 19.45045241,  -8.21341071), ( 21.93604568,  -6.81234162),
         ( 24.40709589,  -5.39864845), ( 26.86661004,  -3.97502106),
         ( 29.31762493,  -2.54411871), ( 31.76319801,  -1.10857781),
         ( 34.20639942,   0.32898001), ( 36.65030466,   1.76593955),
         ( 39.09798768,   3.19968374), ( 41.55251374,   4.6275852 ),
         ( 44.01693189,   6.04699804), ( 46.49426651,   7.45524993),
         ( 48.98750752,   8.84963453), ( 51.4995989 ,  10.22740448),
         ( 54.03342512,  11.58576509), ( 56.59179508,  12.92186896),
         ( 59.17742314,  14.23281165), ( 61.79290712,  15.51562883),
         ( 64.44070278,  16.76729487), ( 67.12309478,  17.98472356),
         ( 69.84216409,  19.16477088), ( 72.59975183,  20.30424045),
         ( 75.39742013,  21.3998918 ), ( 78.23641033,  22.44845192),
         ( 81.11759966,  23.44663022), ( 84.04145735,  24.39113719),
         ( 87.00800203,  25.27870692), ( 90.01676196,  26.10612335),
         ( 93.06674057,  26.87025019), ( 96.15638947,  27.56806406),
         ( 99.28359159,  28.19669038), (102.44565666,  28.75344107),
         (105.63933131,  29.23585315), (108.86082534,  29.64172698),
         (112.105855  ,  29.96916281), (115.36970341,  30.21659414),
         (118.64729687,  30.38281659), (121.93329519,  30.46701088),
         (125.22219273,  30.46875885), (128.50842634,  30.38805179),
         (131.78648572,  30.22529063), (135.05102157,  29.98127794),
         (138.29694697,  29.6572022 ), (141.51952827,  29.2546151 ),
         (144.71446203,  28.77540295), (147.87793614,  28.22175338),
         (151.00667382,  27.59611901), (154.09796066,  26.90117914),
         (157.14965528,  26.13980125), (160.16018547,  25.31500315),
         (163.12853176,  24.42991703), (166.05420084,  23.48775622),
         (168.93719133,  22.49178507), (171.77795423,  21.44529257),
         (174.57735037,  20.35156967), (177.33660656,  19.21389046),
         (180.05727218,  18.03549704), (182.74117737,  16.81958784),
         (185.39039367,  15.56930924), (188.00719783,  14.28774998),
         (190.59403895,  12.97793826), (193.15350938,  11.64284103),
         (195.68831902,  10.28536518), (198.20127316,   8.90836046),
         (200.69525342,   7.51462369), (203.17320154,   6.10690412),
         (205.63810576,   4.6879097 ), (208.09298919,   3.26031403),
         (210.54090002,   1.82676397), (212.984903  ,   0.38988751),
         (215.42807182,  -1.04769799), (217.87348209,  -2.48337744),
         (220.32420429,  -3.91452965), (222.7832966 ,  -5.338519  ),
         (225.25379684,  -6.75268736), (227.73871349,  -8.15434631),
         (230.24101506,  -9.54076983), (232.76361762, -10.90918763),
         (235.30937003, -12.25677927), (237.88103647, -13.58066929),
         (240.48127601, -14.87792359), (243.11261883, -16.14554723),
         (245.777439  , -17.38048408), (248.47792364, -18.57961852),
         (251.2160385 , -19.7397795 ), (253.9934903 , -20.85774736),
         (256.81168612, -21.93026371), (259.67169071, -22.95404466),
         (262.57418275, -23.92579758), (265.51941137, -24.84224172),
         (268.50715471, -25.70013256), (271.53668252, -26.49628998),
         (274.6067251 , -27.22762983), (277.71545113, -27.89119849),
         (280.86045662, -28.48420985), (284.03876751, -29.00408353)]
     (pm_ra_cosdec, pm_dec) in mas / yr
        [( 0.42038493, -7.26162297e-02), ( 0.90512965, -1.30974817e-01),
         (-4.48727819,  5.21933575e-01), (-0.5486279 ,  4.80821163e-02),
         (-0.047086  ,  2.76643413e-03), ( 1.2981521 , -3.85825768e-02),
         (-3.37233662,  2.07996570e-03), (-0.16879588, -4.80884556e-03),
         (-3.24422648, -1.86625062e-01), ( 0.06234929,  5.38826796e-03),
         (-1.78083779, -2.04982615e-01), (-1.49812935, -2.14991792e-01),
         (-2.65460325, -4.55418090e-01), (-0.66490383, -1.32441589e-01),
         ( 1.73790179,  3.93344276e-01), (-2.34827507, -5.93932182e-01),
         (-0.01514567, -4.22403206e-03), (-2.6778858 , -8.14565041e-01),
         ( 3.85324716,  1.26666332e+00), ( 1.05193121,  3.70769798e-01),
         (-1.82978002, -6.86794925e-01), (-1.01515406, -4.03322168e-01),
         (-3.41648692, -1.42907452e+00), ( 0.70237122,  3.07814453e-01),
         (-0.84547727, -3.86501962e-01), ( 4.34559967,  2.06377770e+00),
         ( 2.48934168,  1.22356461e+00), ( 1.15341048,  5.84695868e-01),
         ( 1.44670873,  7.53870884e-01), (-1.0063789 , -5.37390712e-01),
         (-1.02769985, -5.60680617e-01), (-0.29313972, -1.62932136e-01),
         ( 3.13710575,  1.77154254e+00), (-0.3615132 , -2.06862483e-01),
         (-2.417589  , -1.39813830e+00), ( 1.95480557,  1.13967216e+00),
         ( 0.30442924,  1.78479249e-01), ( 2.31467536,  1.36127164e+00),
         ( 0.64850992,  3.81645089e-01), (-1.4163262 , -8.32014916e-01),
         (-3.85099504, -2.25267304e+00), ( 2.80480006,  1.62970124e+00),
         (-3.99110809, -2.29767913e+00), ( 1.51113168,  8.59758664e-01),
         ( 1.76533678,  9.90015909e-01), ( 3.96884309,  2.18800118e+00),
         ( 3.7302794 ,  2.01595967e+00), (-0.06168553, -3.25851074e-02),
         ( 3.71563182,  1.91268527e+00), (-3.54745342, -1.77382973e+00),
         ( 1.29222332,  6.25522999e-01), ( 3.24023216,  1.51293205e+00),
         ( 0.5160305 ,  2.31507726e-01), (-1.17537408, -5.04523424e-01),
         ( 2.09068911,  8.54689718e-01), ( 4.56030208,  1.76652383e+00),
         (-2.91131612, -1.06258442e+00), (-3.81571492, -1.30385013e+00),
         ( 1.58923791,  5.04726452e-01), (-0.32871151, -9.62131876e-02),
         (-0.9592938 , -2.56217194e-01), (-1.63540853, -3.93850869e-01),
         (-3.5318261 , -7.55724902e-01), (-1.96613393, -3.66881621e-01),
         ( 2.77106872,  4.39959039e-01), ( 2.61528974,  3.41421855e-01),
         ( 1.02160409,  1.04212379e-01), ( 2.29815352,  1.68268813e-01),
         ( 0.39426674,  1.74465060e-02), ( 2.89779482,  4.39699940e-02),
         ( 4.75206298, -6.62458331e-02), (-4.8235738 ,  2.07511899e-01),
         (-3.62173939,  2.60747174e-01), ( 4.82700922, -4.86531048e-01),
         ( 2.65982824, -3.44036241e-01), (-3.78269165,  5.96078675e-01),
         ( 1.51762962, -2.81414383e-01), ( 0.13045134, -2.77634474e-02),
         (-3.5774063 ,  8.57508354e-01), (-3.61710059,  9.62111134e-01),
         (-2.80041402,  8.16676731e-01), (-2.03787399,  6.45091093e-01),
         (-0.65802345,  2.24188752e-01), (-1.49709202,  5.44965038e-01),
         ( 2.55487034, -9.87305100e-01), (-3.05570014,  1.24647930e+00),
         (-2.28611339,  9.79371242e-01), (-3.45987227,  1.54944320e+00),
         ( 2.02503701, -9.44009352e-01), (-3.54397129,  1.71303024e+00),
         ( 3.6626794 , -1.82905923e+00), ( 2.96997241, -1.52706506e+00),
         ( 0.73517934, -3.87954554e-01), ( 0.02051173, -1.10751383e-02),
         (-4.36125271,  2.40244589e+00), (-0.66574132,  3.73103498e-01),
         (-0.18500391,  1.05199401e-01), (-1.63933572,  9.43342769e-01),
         (-2.4744908 ,  1.43728963e+00), ( 2.17873214, -1.27416976e+00),
         ( 4.11787624, -2.41871527e+00), (-1.84868723,  1.08791568e+00),
         (-0.9920448 ,  5.83471684e-01), ( 2.26046329, -1.32549421e+00),
         ( 4.22002611, -2.46102556e+00), (-2.44423161,  1.41410241e+00),
         (-1.6988942 ,  9.72616969e-01), (-3.77819905,  2.13487980e+00),
         (-2.43250736,  1.35301328e+00), (-2.69586911,  1.47202520e+00),
         ( 1.81234219, -9.68700442e-01), (-3.28574221,  1.71405991e+00),
         (-3.19006695,  1.61912929e+00), ( 3.32042386, -1.63430842e+00),
         ( 0.48761599, -2.31929469e-01), ( 0.76014171, -3.48081409e-01),
         ( 2.12013667, -9.30894250e-01), ( 3.90529572, -1.63692250e+00),
         ( 2.693081  , -1.07241345e+00), ( 0.74687429, -2.81042960e-01),
         (-3.20047256,  1.13121634e+00), (-0.88680788,  2.92423721e-01),
         ( 1.04783047, -3.19837135e-01), ( 3.56103931, -9.97017397e-01),
         ( 2.46945087, -6.27329467e-01), ( 0.10359887, -2.35657414e-02),
         ( 1.00242672, -2.00835590e-01), (-0.35201049,  6.08054007e-02)]>





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.327 seconds)


.. _sphx_glr_download_generated_examples_coordinates_plot_sgr-coordinate-frame.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_sgr-coordinate-frame.py <plot_sgr-coordinate-frame.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_sgr-coordinate-frame.ipynb <plot_sgr-coordinate-frame.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
